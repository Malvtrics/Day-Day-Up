1:format the UI showing data
[DisplayFormat(DataFormatString = "{0:0}", ApplyFormatInEditMode = true)]
2:soluction for "Server Too Busy" error:
  add delayNotificationTimeout="20" under this node,the default value is 5,
  which is not enough for our solutions to conjure up everything it needed to successfully run.
  <system.web>
      <httpRuntime maxRequestLength="104850" 
                   executionTimeout="600" 
                   enableVersionHeader="false" 
                   delayNotificationTimeout="20" />
  </system.web>
3: set start URL in web property "http://localhost:59259/" and this will avoid the application open the current page you when you debug
4: asp.net mvc 3/4 cannot set chrome as the default browser
5: NLog GetCurrentClassLogger slow-running 
   see the reason in http://stackoverflow.com/questions/35110222/nlog-getcurrentclasslogger-slow-running-method-warning-overstated
6: AntiForgeryToken -> to defend CSRF attack
7: what does visual studio mean by normalize inconsistent line endings?
  you have endings with something other than a carriage reurn/ine feed pair, It often happens when you copy and paste from a web page
  into the code editor.
  Normalizing the line endings is just making sure that all of the line ending characters are consistent.
  It prevents one line from ending in \r\n and another ending with \r or \n;
  \r\n is used for windows line end pair while \r or \n is usded for Mac or Linux files
8:throw an exception in controller and get it in ajax error function 
 1) in VS2010 
  //back end 
  public ActionResult SaveData(string id)
  {
      try
      {
          throw new Exception("test");
      }
      catch (Exception ex)
      {
          Response.StatusCode = 500; // Suggest internal server error
          return Json(new
          {
              Message = ex.Message // or some other message.
          });
      }
  }
  //front end 
  saveData = function () {
    $.ajax({
        url: '@Url.Action("SaveData")',
        type: "POST",
        success: function (data, status, xhr) {
            alert("success,message is " + data);
        },
        error: function (xhr, status, err) {
            alert("error,message is " + JSON.parse(xhr.responseText).Message);
        }
    });
  }
  2) in VS2015
  //back end 
  public ActionResult SaveData()
  {
      bool success = true;
      try
      {
          if (success)
          {
              return new HttpStatusCodeResult(200, "ok");
          }
          else
          {
              throw new Exception("error message!");
          }
      }
      catch (Exception ex)
      {
          return new HttpStatusCodeResult(404, ex.Message);
      }
  }
  //front end 
  saveData = function () {
      $.ajax({
          url: '@Url.Action("SaveData")',
          type: "POST",
          success: function (data, status, xhr) {
              alert("success,message is " + data);
          },
          error: function (xhr,status,err) {
              alert("error,message is " + err);
          }
      });
  }
