1:全Javascript的架构是否适合于产品级的应用呢？
  不得不承认，如果开发堆栈的每一层都能使用JavaScript将会是一件很棒的事情（至少对于原型开发来说是这样），
  然而千万要注意，不要为了追求这一目标，而把自己而束缚住了。
  尽管的确有越来越多的大规模应用都在采用类似的架构，如Walmart、LinkedIn，但并不意味着模仿他们就一定能成功。
  另一个需要注意的是，相对于其他的语言（如Ruby，Python或Java），
  在Node上搭建后端要困难得多。你可能要自己处理内存泄漏，避免在事件循环中进行耗时运算，还要非常小心异常处理，
  如果这些处理不当就很有可能会导致整个应用服务器崩溃，但是这些问题在其他平台上却已经处理得很好了
  。然而，这并不是说，Node不能运用在生产环境下，当然可以，但要格外用心。
  实话实说，想要“一揽子”为Web应用提供一个大而全的解决方案将非常困难，
  MEAN架构也肯定有其局限性。在前端与后端的设计模式、原则和风格中有大量的演化，
  如果你觉得PHP或Rails是更明智的选择，那就继续使用下去，否则的话，不妨试试MEAN，至少在当下值得一试。
2:random 产生随即数不能保证唯一性,唯一性一般要和时间结合起来, 可以参考star的shortid的源码
3: Jquery is designed to do 4 things:
  1) traversing DOM
  2) animation
  3) event handling 
  4) ajax interaction
4: Babel is a JavaScript compiler.Babel kneden -> make async to promise  
  surf "https://github.com/marten-de-vries/kneden" for more details
5: FirstLine
  \SecondLine\
   ThirdLine
   var myStr = "FirstLine\n\\SecondLine\\\rThirdLine";
   1: in js,string is immutable , (array is immutable , can be changed with index )
2: Variables which are used without the var keyword are automatically created in the global scope.
3: 1 == '1' true(equal) 
   1 === '1' false(strict equal)(data type)
   Like the equality operator, less than operator converts data types while comparing.'1' < 2(true)
4: switch case use strict equality
5: http://json.org/ (json explanation)
6: js function return everything no definition for return type when declare;
7: {"name":"marten"} hasOwnProperty("name")
   {name: "marten"}  hasOwnProperty(name)
8: Math.floor(Math.random() * (max - min + 1)) + min
9: javascript getMonth 0-11 need to + 1 in some cases
10: Regular expressions => /the/gi
   / is the start of the regular expression.
   the is the pattern we want to match.
   / is the end of the regular expression.
   g means global, which causes the pattern to return all matches in the string, not just the first one.
   i means that we want to ignore the case (uppercase or lowercase) when searching for the pattern.
11:/\d+/g (\d) in js replace function replace(/\d+/gi)  not replace('/\d+/'), it is not a string 
   /\s+/ (\s) contrary(\S)
   whitespace including: " " (space), \r (the carriage return), \n (newline), \t (tab), and \f (the form feed).
12: in an object , using this-> public , using var-> private
13: js array methods: map/reduce/filter/sort
    reminder: to filter function -> callback returns true will be kept.
    sort function: sort can be passed a compare function as a callback. The compare function should return
         a negative number if a should be before b, a positive number if a should be after b,  or 0 if they are equal.
14:The second argument to substring is the index to stop at (but not include),    
   but the second argument to substr is the maximum length to return.
15:slice/splice usage need to be enhanced
16: \ in string is meaningless, should use \\ instead
17: indexOf can be used for string and array
18: charCodeAt()  fromCharCode() very useful
19: Object.keys(val) good method for parsing json data
20: pre-filter json data:
    json = json.filter(function(val) {
      return (val.id !== 1);
    });
21: get user's position 
 if (navigator.geolocation) {
   navigator.geolocation.getCurrentPosition(function(position) {
     $("#data").html("latitude: " + position.coords.latitude + "<br>longitude: " + position.coords.longitude);
   });
 }
22: for same origin policy: https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy
    http/https 2 prototals , can't use ajax with one kind through another
23: for cross origin-request: use jsonp
24: $("[name='query']") use this kind of selector
25: difference between em and rem and px
26: only 4 kb => nodelist.js => can replace jquery under most conditions => https://github.com/eorroe/NodeList.js/tree/master
27: The differences between Js's window.onload and Jquery's $(document).ready?
  The ready event occurs after the HTML document has been loaded , while the onload event occurs later , when all content 
  (eg. images) also has been loaded.
  The onload evenet is a standard event in the Dom , while the ready evenet is specific to jQuery , the purpose of the ready event 
  is that it should occur as early as possible after the document has loaded , so that code that adds functionality to the elements 
  in the page doesn.t have to wait for all content to load.
28:Jquery
  content ops: html()/text()
  class ops: addClass()/css()
  append content: append()/appendTo()/before()/after()
  copy: clone()
  replace elements: replaceWith()/replaceAll()
  wrap elements: wrap()/wrapInner()
  delete elements: remove()/empty()
  binding events: bind()/unbind()
  toggle(speed,callback) (for hide and show)
  slideToggle([duration],[,complete]) description: display or hide the matched elements with a sliding motion
  one time event: one(event,[data],function)
  trigger the events: trigger(event)
  basic animation effects (fade/slide)
  custom animation effects animate({params},speed , callback)
  stop animation: stop()
  get data from server: load(url , data, callback)/getJson(url,[data],callback)/getScript(url,[callback])/get(url,callback)
  send data to server: post(url,data,callback)
30 new vs prototype 
http://thecodeship.com/web-development/methods-within-constructor-vs-prototype-in-javascript/
31
阮一锋老师关于闭包的解释很好:
http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html 
一套经典的闭包题目
function fun(n,o) {
  console.log(o)
  return {
    fun:function(m){
      return fun(m,n);
    }
  };
}
var a = fun(0);  a.fun(1);  a.fun(2);  a.fun(3);//undefined,?,?,?
var b = fun(0).fun(1).fun(2).fun(3);//undefined,?,?,?
var c = fun(0).fun(1);  c.fun(2);  c.fun(3);//undefined,?,?,?
//问:三行a,b,c的输出分别是什么？
http://www.cnblogs.com/xxcanghai/p/4991870.html
32: addEventListener 最后一个参数为true表明用捕获方式
对于点击的target　事件执行顺序取决于绑定的顺序
33: javascript 函数作用域链
http://www.cnblogs.com/ziyunfei/archive/2012/11/17/2768967.html
function outerFn(i, j) {
    var x = i + j;
    return function innerFn(x) {
        return i + x;
    }
}
var func1 = outerFn(5, 6);
var func2 = outerFn(10, 20);
alert(func1(10)); //返回15
alert(func2(10)); //返回20
34: javascript函数调用有四种形式
方法调用（保存在对象属性中）， 函数调用（最正常调用方式）， 构造函数调用（new方式）， 间接调用（call/apply）
注意分析this 大部分情况下都是指调用函数的对象
35:http://web.jobbole.com/82251/ 
10道不错的js笔试题
    第九题目用闭包的解决办法
    function JSClass() {
        this.m_Text = 'division element';
        this.m_Element = document.createElement('div');
        this.m_Element.innerHTML = this.m_Text;
        this.m_Element.addEventListener('click',(function(text){
            return function() {
                alert(text);
            };
        })(this.m_Text));
    }
 
    JSClass.prototype.Render = function() {
        document.body.appendChild(this.m_Element);
    }
 
    JSClass.prototype.func = function () {
        alert(this.m_Text);
    };

    var jc = new JSClass();
    jc.Render(); 
    jc.func();
11: 在任意一个时间点,只能有唯一一个执行上下文在运行之中, 这就是js为什么是单线程的原因,意思就是一次只能处理一个请求.
12: JavaScript 存储  http://web.jobbole.com/88241/
13: this的理解 http://web.jobbole.com/88264/
   总结
   情况1：如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，
    这里需要说明的是在js的严格版中this指向的不是window，但是我们这里不探讨严格版的问题，你想了解可以自行上网查找。
   情况2：如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。
   情况3：如果一个函数中有this，这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象，
   var o = {
    a:10,
    b:{
        // a:12,
        fn:function(){
            console.log(this.a); //undefined
        }
      }
    }
    o.b.fn();
    还有一种比较特殊的情况，例子4：
    var o = {
        a:10,
        b:{
            a:12,
            fn:function(){
                console.log(this.a); //undefined
                console.log(this); //window
            }
        }
    }
    var j = o.b.fn;
    j();
    这里this指向的是window，是不是有些蒙了？其实是因为你没有理解一句话，这句话同样至关重要。
    this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的，例子4中虽然函数fn是被对象b所引用，
    但是在将fn赋值给变量j的时候并没有执行所以最终指向的是window，这和例子3是不一样的，例子3是直接执行了fn。
    当this碰到return时
    如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。
    function fn()  
    {  
        this.user = '追梦子';  
        return {};  //或者 return function(){};  结果都是一样
    }
    var a = new fn;  
    console.log(a.user); //undefined
    function fn()  
    {  
        this.user = '追梦子';  
        return 1;//或者 undefined 结果都一样
    }
    var a = new fn;  
    console.log(a.user); //追梦子
    还有一点就是虽然null也是对象，但是在这里this还是指向那个函数的实例，因为null比较特殊。(我特么也是醉了)
    function fn()  
    {  
        this.user = '追梦子';  
        return null;
    }
    var a = new fn;  
    console.log(a.user); //追梦子
